worker_processes  1;        #nginx worker 数量
error_log logs/error.log debug;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

# http {
#     server {
#         listen 8080;
#         location / {
#             default_type text/html;
#             content_by_lua_block {
#                 ngx.say("<h2>hello</h2>")
#             }
#         }
#     }
# }



http {
    server {

        access_log on;
        access_log logs/access.log;

        #监听端口，若你的 8080 端口已经被占用，则需要修改
        listen 8080;

        location / {

            # root /usr/local/Cellar/openresty/1.19.9.1_2/nginx/html/;
            # index index.html;

            # 如果整个根目录配置被注释，没有配置 index 指令时，访问 localhost:8080 时会默认导向 localhost:8080/index.html
            # try_files $uri $uri/  file:///usr/local/Cellar/openresty/1.19.9.1_2/nginx/html/index.html;
            index home.html;

            try_files $uri /home.html;
        }

        # Nginx将在这个字符串匹配后停止进行正则表达式的匹配（location指令中正则表达式的匹配的结果优先使用） ,一般这种情况用来匹配目录
        # location ^~ /hello/ {
        
        location ~ ^/(hello$|hello/) {

            access_by_lua_block     {
                local uri_args = ngx.req.get_uri_args()   

                ngx.log(ngx.DEBUG,string.format("匹配正则表达式, uri_args: %s",table.concat(uri_args,',')))

                if uri_args["__mobile__"] ~= nil then
                    -- Forward requests containing __mobile__ parameter to mobile.
                    uri_args["__mobile__"] = nil
                    ngx.req.set_uri_args(uri_args)
                    ngx.log(ngx.DEBUG,string.format("有参数:__mobile__, 走移动端"))
                    return ngx.exec("/hello-mobile/index.html")
                elseif uri_args["__pc__"] ~= nil then
                    -- Forward requests containing __pc__ parameter to pc.
                    uri_args["__pc__"] = nil
                    ngx.req.set_uri_args(uri_args)
                    ngx.log(ngx.DEBUG,string.format("有参数:__pc__, 走PC端"))
                    return ngx.exec("/hello-pc/index.html")
                end

                if ngx.var.http_user_agent then

                     ngx.log(ngx.DEBUG,string.format("请求方带有 useragent，检查useragent"))

                    -- Forward PC (non-app) requests to hello-pc.

                    if(string.find(ngx.var.http_user_agent, "Windows NT") or
                        string.find(ngx.var.http_user_agent, "Macintosh") or
                        string.find(ngx.var.http_user_agent, "iPad") or
                        string.find(ngx.var.http_user_agent, "SM%-T") or
                        string.find(ngx.var.http_user_agent, "SM%-P") or
                        string.find(ngx.var.http_user_agent, "X11") ) then

                        ngx.log(ngx.DEBUG,string.format("不是移动端，走PC页面"))
                        return ngx.exec("/hello-pc/index.html")

                    else
                    -- Forward mobile (non-app) requests to mobile.
                        ngx.log(ngx.DEBUG,string.format("默认走移动端页面"))
                        return ngx.exec("/hello-mobile/index.html")
                    end

                end
                ngx.log(ngx.DEBUG,string.format("兜底处理，去首页"))
                return ngx.exec("/home.html")
            }
        }

        # 以上所有 return ngx.exec("/hello-mobile/index.html") 改为使用一下内部重定向也可，即
        # return ngx.exec("/hello-mobile") or return ngx.exec("/hello-mobile/")

        # location ~ /hello-pc/ {
        #     try_files $uri  /hello-pc/index.html;
        # }
        

        # location ~ /hello-mobile {
        #     try_files $uri  /hello-mobile/index.html;
        # }


    }
}
